const path = require('path')
const {
  getConfig,
  updateJsonFile,
  updateToolConfig,
  getTestsRootDir,
  getParentProjectPackageJsonSafe,
  validatePackageName,
  createFilesFromTemplates,
  getProjectRootDir,
} = require('@csssr/e2e-tools/utils')
const packageName = require('./package.json').name

function normalizeUrl(input) {
  if (input.startsWith('http')) {
    return input
  }

  return `http://${input}`
}

function falseToError(error, func) {
  return (str) => (func(str) ? true : error)
}

async function addAnyProjectFields(ctx, opts) {
  const parentProjectPackageJson = getParentProjectPackageJsonSafe() || {}

  async function prompt(question) {
    const answers = await ctx.inquirer.prompt([question])

    return answers[question.name]
  }
  const config = getConfig()

  const launchUrl = await prompt({
    type: 'input',
    name: 'launchUrl',
    default: config.defaultLaunchUrl,
    message: 'Адрес стенда по умолчанию',
  })

  const projectName = await prompt({
    type: 'input',
    name: 'projectName',
    default: config.projectName || parentProjectPackageJson.name,
    message: 'Название проекта (маленькими буквами без пробелов)',
    validate: falseToError('Навалидное название пакета', validatePackageName),
  })

  const configNewFields = {
    projectName,
    defaultLaunchUrl: normalizeUrl(launchUrl),
  }

  updateJsonFile({
    filePath: path.join(getTestsRootDir(), 'e2e-tools.json'),
    update(prevConfig) {
      return {
        ...prevConfig,
        ...configNewFields,
      }
    },
  })

  createFilesFromTemplates({
    templatesGlob: '**/*.hbs',
    templatesData: {
      config: { ...config, ...configNewFields },
    },
    templatesRoot: opts.templatesRoot,
    destinationRoot: getProjectRootDir(),
  })
}

function createToolConfig() {
  return {
    browsers: {},
  }
}

async function initScript(ctx) {
  await addAnyProjectFields(ctx, {
    templatesRoot: path.join(__dirname, 'templates'),
  })

  updateToolConfig(packageName, createToolConfig)
}

function upgrade() {
  createFilesFromTemplates({
    templatesGlob: '**/*.autogenerated.hbs',
    templatesData: { config: getConfig() },
    templatesRoot: path.join(__dirname, 'templates'),
    destinationRoot: getProjectRootDir(),
  })
}

function getCommands(context) {
  return [].filter(Boolean)
}

module.exports = {
  getCommands,
  initScript,
  upgrade,
}
