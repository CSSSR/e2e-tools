const path = require('path')
const spawn = require('cross-spawn')
// const getPackageInfo = require('package-info')
const {
  getTestsRootDir,
  getProjectRootDir,
  updateJsonFile,
  runSafe,
  getConfig,
  createFilesFromTemplates,
} = require('./utils')
const toolsPackageInfo = require('../package.json')

// const initCommand = ({ config }) => ({
//   command: 'init',
//   describe: 'Setup tests in current project',
//   handler() {
//     if (path.basename(process.cwd()) === 'e2e-tests') {
//       throw new Error('Already inited')
//     }

//     createFilesFromTemplates({
//       templatesGlob: '**/*.hbs',
//       templatesData: { toolsVersion: config.version },
//       templatesRoot: path.join(__dirname, '../templates'),
//       destinationRoot: getProjectRootDir(),
//     })

//     spawn.sync('yarn', ['install'], {
//       stdio: 'inherit',
//       cwd: getTestsRootDir(),
//     })
//   },
// })

const addToolCommand = ctx => ({
  command: 'add-tool <package-name>',
  describe: 'Add new tool',
  handler({ packageName }) {
    updateJsonFile(ctx, {
      filePath: path.join(getTestsRootDir(ctx), 'e2e-tools.json'),
      update(config) {
        return {
          ...config,
          tools: {
            ...config.tools,
            [packageName]: true,
          },
        }
      },
    })

    // spawn.sync('yarn', ['add', '--dev', '--tilde', packageName], {
    //   stdio: 'inherit',
    //   cwd: getTestsRootDir(),
    // })
    ctx.yarn.add({
      dev: true,
      tilde: true,
      packageName: packageName,
      cwd: getTestsRootDir(ctx),
    })

    // spawn.sync('yarn', ['install'], {
    //   stdio: 'inherit',
    //   cwd: getTestsRootDir(),
    // })
    ctx.yarn.install({
      cwd: getTestsRootDir(ctx),
    })

    const tool = require(packageName)

    tool.initScript(ctx).catch(console.error)
  },
})

async function updateTool(packageName, context) {
  spawn.sync('yarn', ['add', '--dev', '--tilde', `${packageName}@latest`], {
    stdio: 'inherit',
    cwd: getTestsRootDir(),
  })

  const tool = require(packageName)

  if (tool.upgrade) {
    await tool.upgrade(context)
  }
}

const upgradeCommand = ctx => ({
  command: 'upgrade',
  describe: 'Upgrades all packages',
  async handler() {
    const info = await ctx.getPackageInfo('@csssr/e2e-tools')
    const localInfo = ctx.getLocalPackageInfo('@csssr/e2e-tools')

    if (localInfo.version !== info.version) {
      ctx.yarn.add({
        dev: true,
        tilde: true,
        packageName: localInfo.name,
        version: 'latest',
        cwd: getTestsRootDir(ctx),
      })

      // Если прошло обновление основного пакета, запускаем новую версию кода и выходим
      ctx.yarn.run('et upgrade', {
        cwd: getTestsRootDir(ctx),
      })

      return
    }

    createFilesFromTemplates({
      templatesGlob: '**/*.autogenerated.hbs',
      templatesData: { toolsVersion: localInfo.version },
      templatesRoot: path.join(__dirname, '../templates'),
      destinationRoot: getProjectRootDir(ctx),
    })

    const config = getConfig()
    if (!config.tools) {
      return
    }

    const toolNames = Object.keys(config.tools)

    for (const toolName of toolNames) {
      await updateTool(toolName, ctx)
    }

    spawn.sync('yarn', ['install'], {
      stdio: 'inherit',
      cwd: getTestsRootDir(),
    })
  },
})

function initCommand(ctx) {
  return {
    command: 'init',
    describe: 'Setup tests in current project',
    handler() {
      const testsRootDir = runSafe(() => getTestsRootDir(ctx))

      if (testsRootDir) {
        throw new Error('Already inited')
      }

      createFilesFromTemplates(ctx, {
        templatesGlob: '**/*.hbs',
        templatesData: { toolsVersion: ctx.getLocalPackageInfo('@csssr/e2e-tools').version },
        templatesRoot: path.join(__dirname, '../templates'),
        destinationRoot: getProjectRootDir(ctx),
      })

      ctx.yarn.install({
        cwd: getTestsRootDir(ctx),
      })
    },
  }
}

exports.main = ctx => {
  const config = runSafe(() => getConfig(ctx))

  ctx.yargs
    .command(addToolCommand(ctx))
    .command(initCommand(ctx))
    .command(upgradeCommand(ctx))

  if (config && config.tools) {
    Object.keys(config.tools).forEach(toolName => {
      const tool = require(toolName)
      if (typeof tool.getCommands === 'function') {
        tool.getCommands(ctx).forEach(command => {
          ctx.yargs.command(command)
        })
      }
    })
  }

  ctx.yargs.demandCommand().help().argv
}
